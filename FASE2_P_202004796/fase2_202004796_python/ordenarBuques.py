 #! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.2
#  in conjunction with Tcl version 8.6
#    Sep 23, 2022 01:13:59 AM CST  platform: Windows NT


from asyncio.windows_events import NULL
import sys
from tkinter import Label, Toplevel, messagebox
from PIL import Image

try:
    import tkinter as tk
except ImportError:
    import tkinter as tk


from matriz import *
from cliente import*

mainUser=""
matrizUser=""
matrizOponente=""
dimension=10 
p=0
s=0
b=0
d=0
newWindow=""
img=""
img2=""



def resise():
    image = Image.open('tablero.png')
    new_image = image.resize((370, 370))
    new_image.save('tablero.png')
    image = Image.open('tabblero2.png')
    new_image = image.resize((370, 370))
    new_image.save('tabblero2.png')

def set_dimension(x):
    global matrizUser,matrizOponente
    matrizUser=Matriz()
    matrizOponente=Matriz()
    global dimension
    dimension=int(x)
    print(dimension)

def cambiarImg():
    global img, newWindow, img2
    extension ="tabblero2.png"

    matrizOponente.graficaAtaque(dimension,"tabblero2")
    resise()
    img2 = tk.PhotoImage(file="tabblero2.png")
    label1 = tk.Label(newWindow,image=img2).place(x=570, y=100, height=380, width=380)

def openNewWindow(x): 
    global mainUser
    mainUser=x
    matrizOponente.imprimir()
    global newWindow,img, img2
    
    
    newWindow = Toplevel() 
  
    
    
    newWindow.title("New Window") 
  
    
    newWindow.geometry("1000x600") 
  
    
    img2 = tk.PhotoImage(file="tabblero2.png")
    label1 = tk.Label(newWindow,image=img2).place(x=570, y=100, height=380, width=380)

    img = tk.PhotoImage(file="tablero.png")
    label2 = tk.Label(newWindow,image=img).place(x=50, y=100, height=380, width=380)

    boton1 = tk.Button(newWindow)
    boton1.place(x=300,y=500, height=64, width=107)
    boton1.configure(activebackground="#ececec")
    boton1.configure(activeforeground="#000000")
    boton1.configure(background="#80ff80")
    boton1.configure(disabledforeground="#a3a3a3")
    boton1.configure(font="-family {Segoe UI} -size 17 -weight bold")
    boton1.configure(foreground="#ffffff")
    boton1.configure(highlightbackground="#d9d9d9")
    boton1.configure(highlightcolor="black")
    boton1.configure(pady="0")
    boton1.configure(relief="flat")
    boton1.configure(text='''Atacar''')
    boton1.configure(command= lambda:req_agregar_mov(entry1.get(),entry2.get()) and matrizOponente.realizarAtaque(int(entry1.get()),int(entry2.get())) or cambiarImg() or req_agregar_tkns(mainUser))

    boton2 = tk.Button(newWindow)
    boton2.place(x=675,y=500, height=64, width=137)
    boton2.configure(activebackground="#ececec")
    boton2.configure(activeforeground="#000000")
    boton2.configure(background="#ff8080")
    boton2.configure(disabledforeground="#a3a3a3")
    boton2.configure(font="-family {Segoe UI} -size 17 -weight bold")
    boton2.configure(foreground="#ffffff")
    boton2.configure(highlightbackground="#d9d9d9")
    boton2.configure(highlightcolor="black")
    boton2.configure(pady="0")
    boton2.configure(relief="flat")
    boton2.configure(text='''Abandonar''')
    boton2.configure(command=lambda: newWindow.destroy())

    boton3 = tk.Button(newWindow)
    boton3.place(x=850,y=500, height=64, width=107)
    boton3.configure(activebackground="#ececec")
    boton3.configure(activeforeground="#000000")
    boton3.configure(background="#8080ff")
    boton3.configure(disabledforeground="#a3a3a3")
    boton3.configure(font="-family {Segoe UI} -size 17 -weight bold")
    boton3.configure(foreground="#ffffff")
    boton3.configure(highlightbackground="#d9d9d9")
    boton3.configure(highlightcolor="black")
    boton3.configure(pady="0")
    boton3.configure(relief="flat")
    boton3.configure(text='''Regresar''')
    boton3.configure(command=lambda: req_regresar_mov() and matrizOponente.realizarRegreso(int(entry1.get()),int(entry2.get())) or cambiarImg())
    
    entry1 = tk.Entry(newWindow)
    entry1.place(x=200,y=510, height=20, relwidth=0.086)
    entry1.configure(background="white")
    entry1.configure(disabledforeground="#a3a3a3")
    entry1.configure(font="TkFixedFont")
    entry1.configure(foreground="#000000")
    entry1.configure(insertbackground="black")

    entry2 = tk.Entry(newWindow)
    entry2.place(x=200,y=540, height=20, relwidth=0.086)
    entry2.configure(background="white")
    entry2.configure(disabledforeground="#a3a3a3")
    entry2.configure(font="TkFixedFont")
    entry2.configure(foreground="#000000")
    entry2.configure(insertbackground="black")

def llenarP(text):
    global p,dimension,matrizUser,matrizOponente
    print("----------")
    print(dimension," ",p)
    
    if dimension<11:
        if text!="":
            x = text.split(",")
            if (x[2]=="H" or x[2]=="h") and p<1:
                i=0
                while i<4:
                    matrizUser.insertarNodo(int(x[0])+i,int(x[1]),"P")
                    matrizOponente.insertarNodo(dimension+1-int(x[0])-i,dimension+1-int(x[1]),"P")
                    i+=1

                p+=1
                matrizUser.imprimir()
            elif(x[2]=="V" or x[2]=="v") and p<1:
                i=0
                while i<4:
                    matrizUser.insertarNodo(int(x[0]),int(x[1])+i,"P")
                    matrizOponente.insertarNodo(dimension+1-int(x[0]),dimension+1-int(x[1])-i,"P")
                    i+=1
                p+=1
                matrizUser.imprimir()
            else:
                messagebox.showinfo(message="No se pudo añadir :/", title="ALTO")
                matrizUser.imprimir()
                
    elif dimension<21 and dimension>10:
        x = text.split(",")
        if (x[2]=="H" or x[2]=="h") and p<2:
                i=0
                while i<4:
                    matrizUser.insertarNodo(int(x[0])+i,int(x[1]),"P")
                    matrizOponente.insertarNodo(dimension+1-int(x[0])-i,dimension+1-int(x[1]),"P")
                    i+=1

                p+=1
                matrizUser.imprimir()
        elif(x[2]=="V" or x[2]=="v") and p<2:
                i=0
                while i<4:
                    matrizUser.insertarNodo(int(x[0]),int(x[1])+i,"P")
                    matrizOponente.insertarNodo(dimension+1-int(x[0]),dimension+1-int(x[1])-i,"P")
                    i+=1
                p+=1
                matrizUser.imprimir()
        else:
                messagebox.showinfo(message="No se pudo añadir :/", title="ALTO")
                matrizUser.imprimir()
    else:
            x = text.split(",")
            if (x[2]=="H" or x[2]=="h") and p<((dimension-1)/10):
                i=0
                while i<4:
                    matrizUser.insertarNodo(int(x[0])+i,int(x[1]),"P")
                    matrizOponente.insertarNodo(dimension+1-int(x[0])-i,dimension+1-int(x[1]),"P")
                    i+=1

                p+=1
                matrizUser.imprimir()
            elif(x[2]=="V" or x[2]=="v") and p<((dimension-1)/10):
                i=0
                while i<4:
                    matrizUser.insertarNodo(int(x[0]),int(x[1])+i,"P")
                    matrizOponente.insertarNodo(dimension+1-int(x[0]),dimension+1-int(x[1])-i,"P")
                    i+=1
                p+=1
                matrizUser.imprimir()
            else:
                messagebox.showinfo(message="No se pudo añadir :/", title="ALTO")
                matrizUser.imprimir()

def llenarS(text):
    global s,dimension,matrizUser,matrizOponente
    print("----------")
    print(dimension," ",s)
    
    if dimension<11:
        if text!="":
            x = text.split(",")
            if (x[2]=="H" or x[2]=="h") and s<2:
                i=0
                while i<3:
                    matrizUser.insertarNodo(int(x[0])+i,int(x[1]),"s")
                    matrizOponente.insertarNodo(dimension+1-int(x[0])-i,dimension+1-int(x[1]),"s")
                    i+=1
                s+=1
                matrizUser.imprimir()
            elif(x[2]=="V" or x[2]=="v") and s<2:
                i=0
                while i<3:
                    matrizUser.insertarNodo(int(x[0]),int(x[1])+i,"s")
                    matrizOponente.insertarNodo(dimension+1-int(x[0]),dimension+1-int(x[1])+-i,"s")
                    i+=1
                s+=1
                matrizUser.imprimir()
            else:
                messagebox.showinfo(message="No se pudo añadir :/", title="ALTO")
                matrizUser.imprimir()
                
    elif dimension<21 and dimension>10:
        x = text.split(",")
        if (x[2]=="H" or x[2]=="h") and s<4:
                i=0
                while i<3:
                    matrizUser.insertarNodo(int(x[0])+i,int(x[1]),"s")
                    matrizOponente.insertarNodo(dimension+1-int(x[0])-i,dimension+1-int(x[1]),"s")
                    i+=1

                s+=1
                matrizUser.imprimir()
        elif(x[2]=="V" or x[2]=="v") and s<4:
                i=0
                while i<3:
                    matrizUser.insertarNodo(int(x[0]),int(x[1])+i,"s")
                    matrizOponente.insertarNodo(dimension+1-int(x[0]),dimension+1-int(x[1])-i,"s")
                    i+=1
                s+=1
                matrizUser.imprimir()
        else:
                messagebox.showinfo(message="No se pudo añadir :/", title="ALTO")
                matrizUser.imprimir()
    else:
            x = text.split(",")
            if (x[2]=="H" or x[2]=="h") and s<((dimension-1)/10)*2:
                i=0
                while i<3:
                    matrizUser.insertarNodo(int(x[0])+i,int(x[1]),"s")
                    matrizOponente.insertarNodo(dimension+1-int(x[0])-i,dimension+1-int(x[1]),"s")
                    i+=1

                s+=1
                matrizUser.imprimir()
            elif(x[2]=="V" or x[2]=="v") and s<((dimension-1)/10)*2:
                i=0
                while i<3:
                    matrizUser.insertarNodo(int(x[0]),int(x[1])+i,"s")
                    matrizOponente.insertarNodo(dimension+1-int(x[0]),dimension+1-int(x[1])-i,"s")
                    i+=1
                s+=1
                matrizUser.imprimir()
            else:
                messagebox.showinfo(message="No se pudo añadir :/", title="ALTO")
                matrizUser.imprimir()

def llenarD(text):
    global d,dimension,matrizUser,matrizOponente
    print("----------")
    print(dimension," ",d)
    
    if dimension<11:
        if text!="":
            x = text.split(",")
            if (x[2]=="H" or x[2]=="h") and d<3:
                i=0
                while i<2:
                    matrizUser.insertarNodo(int(x[0])+i,int(x[1]),"d")
                    matrizOponente.insertarNodo(dimension+1-int(x[0])-i,dimension+1-int(x[1]),"d")
                    i+=1
                d+=1
                matrizUser.imprimir()
            elif(x[2]=="V" or x[2]=="v") and d<3:
                i=0
                while i<2:
                    matrizUser.insertarNodo(int(x[0]),int(x[1])+i,"d")
                    matrizOponente.insertarNodo(dimension+1-int(x[0]),dimension+1-int(x[1])-i,"d")
                    i+=1
                d+=1
                matrizUser.imprimir()
            else:
                messagebox.showinfo(message="No se pudo añadir :/", title="ALTO")
                matrizUser.imprimir()
                
    elif dimension<21 and dimension>10:
        x = text.split(",")
        if (x[2]=="H" or x[2]=="h") and d<6:
                i=0
                while i<2:
                    matrizUser.insertarNodo(int(x[0])+i,int(x[1]),"d")
                    matrizOponente.insertarNodo(dimension+1-int(x[0])-i,dimension+1-int(x[1]),"d")
                    i+=1

                d+=1
                matrizUser.imprimir()
        elif(x[2]=="V" or x[2]=="v") and d<6:
                i=0
                while i<2:
                    matrizUser.insertarNodo(int(x[0]),int(x[1])+i,"d")
                    matrizOponente.insertarNodo(dimension+1-int(x[0]),dimension+1-int(x[1])-i,"d")
                    i+=1
                d+=1
                matrizUser.imprimir()
        else:
                messagebox.showinfo(message="No se pudo añadir :/", title="ALTO")
                matrizUser.imprimir()
    else:
            x = text.split(",")
            if (x[2]=="H" or x[2]=="h") and d<((dimension-1)/10)*3:
                i=0
                while i<2:
                    matrizUser.insertarNodo(int(x[0])+i,int(x[1]),"d")
                    matrizOponente.insertarNodo(dimension+1-int(x[0])-i,dimension+1-int(x[1]),"d")
                    i+=1

                d+=1
                matrizUser.imprimir()
            elif(x[2]=="V" or x[2]=="v") and d<((dimension-1)/10)*3:
                i=0
                while i<2:
                    matrizUser.insertarNodo(int(x[0]),int(x[1])+i,"s")
                    matrizOponente.insertarNodo(dimension+1-int(x[0]),dimension+1-int(x[1])-i,"s")
                    i+=1
                d+=1
                matrizUser.imprimir()
            else:
                messagebox.showinfo(message="No se pudo añadir :/", title="ALTO")
                matrizUser.imprimir()

def llenarB(text):
    global b,dimension,matrizUser,matrizOponente
    print("----------")
    print(dimension," ",b)
    
    if dimension<11:
        if text!="":
            x = text.split(",")
            if (x[2]=="H" or x[2]=="h") and b<4:
                matrizUser.insertarNodo(int(x[0]),int(x[1]),"b")
                matrizOponente.insertarNodo(dimension+1-int(x[0]),dimension+1-int(x[1]),"b")
                b+=1
                matrizUser.imprimir()
            elif(x[2]=="V" or x[2]=="v") and b<4:
                matrizUser.insertarNodo(int(x[0]),int(x[1]),"b")
                matrizOponente.insertarNodo(dimension+1-int(x[0]),dimension+1-int(x[1]),"b")
                b+=1
                matrizUser.imprimir()
            else:
                messagebox.showinfo(message="No se pudo añadir :/", title="ALTO")
                matrizUser.imprimir()
                
    elif dimension<21 and dimension>10:
        x = text.split(",")
        if (x[2]=="H" or x[2]=="h") and b<8:
                matrizUser.insertarNodo(int(x[0]),int(x[1]),"b")
                matrizOponente.insertarNodo(dimension+1-int(x[0]),dimension+1-int(x[1]),"b")
                b+=1
                matrizUser.imprimir()
        elif(x[2]=="V" or x[2]=="v") and b<8:
                matrizUser.insertarNodo(int(x[0]),int(x[1]),"b")
                matrizOponente.insertarNodo(dimension+1-int(x[0]),dimension+1-int(x[1]),"b")
                b+=1
                matrizUser.imprimir()
        else:
                messagebox.showinfo(message="No se pudo añadir :/", title="ALTO")
                matrizUser.imprimir()
    else:
            x = text.split(",")
            if (x[2]=="H" or x[2]=="h") and b<((dimension-1)/10)*4:
                i=0
                matrizUser.insertarNodo(int(x[0]),int(x[1]),"b")
                matrizOponente.insertarNodo(dimension+1-int(x[0]),dimension+1-int(x[1]),"b")
                b+=1
                matrizUser.imprimir()
            elif(x[2]=="V" or x[2]=="v") and b<((dimension-1)/10)*4:
                matrizUser.insertarNodo(int(x[0]),int(x[1]),"b")
                matrizOponente.insertarNodo(dimension+1-int(x[0]),dimension+1-int(x[1]),"b")
                b+=1
                matrizUser.imprimir()
            else:
                messagebox.showinfo(message="No se pudo añadir :/", title="ALTO")
                matrizUser.imprimir()

def vp_start_gui3(x):
    global mainUser
    mainUser=x
    '''Starting point when module is the main routine.'''
    global val, w, root,matrizUser,p,s,b,d
    matrizUser=Matriz()
    p=0
    s=0
    b=0
    d=0
    root = tk.Tk()
    top = Toplevel3 (root)
    
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Toplevel3 (w)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel3:
    global dimension
    def __init__(self, top=None):
        global dimension, matrizUser, matrizOponente
        
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("424x360+389+108")
        top.minsize(120, 1)
        top.maxsize(1370, 749)
        top.resizable(1,  1)
        top.title("New Toplevel")
        top.configure(background="#ffffff")

        self.menubar = tk.Menu(top,font="TkMenuFont",bg='#ffffff',fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.142, rely=0.056, height=41, width=304)
        self.Label1.configure(background="#ffffff")
        self.Label1.configure(cursor="fleur")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Verdana} -size 20 -weight bold")
        self.Label1.configure(foreground="#8cc6ff")
        self.Label1.configure(text='''Ordena tus barcos''')

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=-0.024, rely=0.278, height=21, width=164)
        self.Label2.configure(background="#ffffff")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font="-family {Segoe UI} -size 10 -weight bold")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''Portaaviones:''')

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=-0.024, rely=0.200, height=21, width=164)
        self.Label3.configure(background="#ffffff")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font="-family {Segoe UI} -size 10 -weight bold")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(text='''Dimension:''')

        self.Entry3 = tk.Entry(top)
        self.Entry3.place(relx=0.33, rely=0.200, height=20, relwidth=0.222)
        self.Entry3.configure(background="white")
        self.Entry3.configure(disabledforeground="#a3a3a3")
        self.Entry3.configure(font="TkFixedFont")
        self.Entry3.configure(foreground="#000000")
        self.Entry3.configure(insertbackground="black")

        self.Button3 = tk.Button(top)
        self.Button3.place(relx=0.566, rely=0.200, height=24, width=47)
        self.Button3.configure(activebackground="#ececec")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#ff80ff")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(font="-family {Segoe UI} -size 13 -weight bold")
        self.Button3.configure(foreground="#ffffff")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(relief="flat")
        self.Button3.configure(text='''SET''')
        self.Button3.configure(command=lambda: set_dimension(self.Entry3.get()) )

        self.Label2_1 = tk.Label(top)
        self.Label2_1.place(relx=-0.024, rely=0.389, height=21, width=164)
        self.Label2_1.configure(activebackground="#f9f9f9")
        self.Label2_1.configure(activeforeground="black")
        self.Label2_1.configure(background="#ffffff")
        self.Label2_1.configure(disabledforeground="#a3a3a3")
        self.Label2_1.configure(font="-family {Segoe UI} -size 10 -weight bold")
        self.Label2_1.configure(foreground="#000000")
        self.Label2_1.configure(highlightbackground="#d9d9d9")
        self.Label2_1.configure(highlightcolor="black")
        self.Label2_1.configure(text='''Submarinos:''')

        self.Label2_2 = tk.Label(top)
        self.Label2_2.place(relx=0.024, rely=0.611, height=21, width=164)
        self.Label2_2.configure(activebackground="#f9f9f9")
        self.Label2_2.configure(activeforeground="black")
        self.Label2_2.configure(background="#ffffff")
        self.Label2_2.configure(disabledforeground="#a3a3a3")
        self.Label2_2.configure(font="-family {Segoe UI} -size 10 -weight bold")
        self.Label2_2.configure(foreground="#000000")
        self.Label2_2.configure(highlightbackground="#d9d9d9")
        self.Label2_2.configure(highlightcolor="black")
        self.Label2_2.configure(text='''Buques:''')

        self.Label2_3 = tk.Label(top)
        self.Label2_3.place(relx=-0.024, rely=0.5, height=21, width=164)
        self.Label2_3.configure(activebackground="#f9f9f9")
        self.Label2_3.configure(activeforeground="black")
        self.Label2_3.configure(background="#ffffff")
        self.Label2_3.configure(disabledforeground="#a3a3a3")
        self.Label2_3.configure(font="-family {Segoe UI} -size 10 -weight bold")
        self.Label2_3.configure(foreground="#000000")
        self.Label2_3.configure(highlightbackground="#d9d9d9")
        self.Label2_3.configure(highlightcolor="black")
        self.Label2_3.configure(text='''Destructores:''')

        self.Entry1 = tk.Entry(top)
        self.Entry1.place(relx=0.33, rely=0.278, height=20, relwidth=0.222)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(insertbackground="black")

        self.Entry1_1 = tk.Entry(top)
        self.Entry1_1.place(relx=0.33, rely=0.389, height=20, relwidth=0.222)
        self.Entry1_1.configure(background="white")
        self.Entry1_1.configure(disabledforeground="#a3a3a3")
        self.Entry1_1.configure(font="TkFixedFont")
        self.Entry1_1.configure(foreground="#000000")
        self.Entry1_1.configure(highlightbackground="#d9d9d9")
        self.Entry1_1.configure(highlightcolor="black")
        self.Entry1_1.configure(insertbackground="black")
        self.Entry1_1.configure(selectbackground="blue")
        self.Entry1_1.configure(selectforeground="white")

        self.Entry1_2 = tk.Entry(top)
        self.Entry1_2.place(relx=0.33, rely=0.5, height=20, relwidth=0.222)
        self.Entry1_2.configure(background="white")
        self.Entry1_2.configure(disabledforeground="#a3a3a3")
        self.Entry1_2.configure(font="TkFixedFont")
        self.Entry1_2.configure(foreground="#000000")
        self.Entry1_2.configure(highlightbackground="#d9d9d9")
        self.Entry1_2.configure(highlightcolor="black")
        self.Entry1_2.configure(insertbackground="black")
        self.Entry1_2.configure(selectbackground="blue")
        self.Entry1_2.configure(selectforeground="white")

        self.Entry1_3 = tk.Entry(top)
        self.Entry1_3.place(relx=0.33, rely=0.611, height=20, relwidth=0.222)
        self.Entry1_3.configure(background="white")
        self.Entry1_3.configure(disabledforeground="#a3a3a3")
        self.Entry1_3.configure(font="TkFixedFont")
        self.Entry1_3.configure(foreground="#000000")
        self.Entry1_3.configure(highlightbackground="#d9d9d9")
        self.Entry1_3.configure(highlightcolor="black")
        self.Entry1_3.configure(insertbackground="black")
        self.Entry1_3.configure(selectbackground="blue")
        self.Entry1_3.configure(selectforeground="white")

        self.Label2_2_1 = tk.Label(top)
        self.Label2_2_1.place(relx=0.212, rely=0.722, height=30, width=214)
        self.Label2_2_1.configure(activebackground="#f9f9f9")
        self.Label2_2_1.configure(activeforeground="black")
        self.Label2_2_1.configure(background="#ffffff")
        self.Label2_2_1.configure(disabledforeground="#a3a3a3")
        self.Label2_2_1.configure(font="-family {Segoe UI} -size 8")
        self.Label2_2_1.configure(foreground="#000000")
        self.Label2_2_1.configure(highlightbackground="#d9d9d9")
        self.Label2_2_1.configure(highlightcolor="black")
        self.Label2_2_1.configure(text='''formato de entrada X,Y,H\nH(horizontal) V(vertical)''')

        self.Button1 = tk.Button(top)
        self.Button1.place(relx=0.566, rely=0.278, height=24, width=47)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#00ff80")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(font="-family {Segoe UI} -size 13 -weight bold")
        self.Button1.configure(foreground="#ffffff")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(relief="flat")
        self.Button1.configure(text='''Add''')
        self.Button1.configure(command=lambda: llenarP(self.Entry1.get()) or self.Entry1.delete(0, tk.END) or matrizUser.grafica(dimension,"tablero"))

        self.Button1_1 = tk.Button(top)
        self.Button1_1.place(relx=0.566, rely=0.389, height=24, width=47)
        self.Button1_1.configure(activebackground="#ececec")
        self.Button1_1.configure(activeforeground="#000000")
        self.Button1_1.configure(background="#00ff80")
        self.Button1_1.configure(disabledforeground="#a3a3a3")
        self.Button1_1.configure(font="-family {Segoe UI} -size 13 -weight bold")
        self.Button1_1.configure(foreground="#ffffff")
        self.Button1_1.configure(highlightbackground="#d9d9d9")
        self.Button1_1.configure(highlightcolor="black")
        self.Button1_1.configure(pady="0")
        self.Button1_1.configure(relief="flat")
        self.Button1_1.configure(text='''Add''')
        self.Button1_1.configure(command=lambda:llenarS(self.Entry1_1.get()) or self.Entry1_1.delete(0, tk.END) or matrizUser.grafica(dimension,"tablero"))

        self.Button1_2 = tk.Button(top)
        self.Button1_2.place(relx=0.566, rely=0.5, height=24, width=47)
        self.Button1_2.configure(activebackground="#ececec")
        self.Button1_2.configure(activeforeground="#000000")
        self.Button1_2.configure(background="#00ff80")
        self.Button1_2.configure(disabledforeground="#a3a3a3")
        self.Button1_2.configure(font="-family {Segoe UI} -size 13 -weight bold")
        self.Button1_2.configure(foreground="#ffffff")
        self.Button1_2.configure(highlightbackground="#d9d9d9")
        self.Button1_2.configure(highlightcolor="black")
        self.Button1_2.configure(pady="0")
        self.Button1_2.configure(relief="flat")
        self.Button1_2.configure(text='''Add''')
        self.Button1_2.configure(command=lambda: llenarD(self.Entry1_2.get()) or self.Entry1_2.delete(0, tk.END) or matrizUser.grafica(dimension,"tablero"))

        self.Button1_3 = tk.Button(top)
        self.Button1_3.place(relx=0.566, rely=0.611, height=24, width=47)
        self.Button1_3.configure(activebackground="#ececec")
        self.Button1_3.configure(activeforeground="#000000")
        self.Button1_3.configure(background="#00ff80")
        self.Button1_3.configure(disabledforeground="#a3a3a3")
        self.Button1_3.configure(font="-family {Segoe UI} -size 13 -weight bold")
        self.Button1_3.configure(foreground="#ffffff")
        self.Button1_3.configure(highlightbackground="#d9d9d9")
        self.Button1_3.configure(highlightcolor="black")
        self.Button1_3.configure(pady="0")
        self.Button1_3.configure(relief="flat")
        self.Button1_3.configure(text='''Add''')
        self.Button1_3.configure(command=lambda:llenarB(self.Entry1_3.get()) or self.Entry1_3.delete(0, tk.END) or matrizUser.grafica(dimension,"tablero"))

        self.Button1_3_1 = tk.Button(top)
        self.Button1_3_1.place(relx=0.377, rely=0.831, height=34, width=87)
        self.Button1_3_1.configure(activebackground="#ececec")
        self.Button1_3_1.configure(activeforeground="#000000")
        self.Button1_3_1.configure(background="#8080ff")
        self.Button1_3_1.configure(disabledforeground="#a3a3a3")
        self.Button1_3_1.configure(font="-family {Segoe UI} -size 13 -weight bold")
        self.Button1_3_1.configure(foreground="#ffffff")
        self.Button1_3_1.configure(highlightbackground="#d9d9d9")
        self.Button1_3_1.configure(highlightcolor="black")
        self.Button1_3_1.configure(pady="0")
        self.Button1_3_1.configure(relief="flat")
        self.Button1_3_1.configure(text='''Jugar''')
        self.Button1_3_1.configure(command=lambda:top.destroy()or matrizOponente.grafica(dimension,"tabblero2") or resise() or openNewWindow(mainUser) )

#top.destroy() or vp_start_gui4() or 